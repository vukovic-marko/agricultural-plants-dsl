/* The following code was generated by JFlex 1.6.0 */

package diplomski.rad.Aplikacija;

import java.io.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/Marko/Documents/GitHub/diplomski-rad/src/main/java/diplomski/rad/Aplikacija/scanner.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\63\1\61\1\62\1\61\1\61\22\0\1\63\1\0\1\54"+
    "\5\0\1\55\1\56\2\0\1\57\2\0\1\60\1\34\11\33\3\0"+
    "\1\53\3\0\1\3\1\7\1\24\1\23\1\6\1\5\1\16\2\1"+
    "\1\2\1\21\1\14\1\10\1\4\1\20\1\12\1\1\1\11\1\17"+
    "\1\22\1\13\1\15\4\1\4\0\1\51\1\0\1\26\1\25\1\44"+
    "\1\32\1\35\3\1\1\50\1\45\1\37\1\42\1\46\1\36\1\41"+
    "\1\40\1\1\1\31\1\27\1\30\1\43\1\52\3\1\1\47\12\0"+
    "\1\62\u1fa2\0\1\62\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\15\2\1\3\5\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\34\2\1\11\1\12\17\2"+
    "\1\13\15\2\1\14\2\2\1\15\1\16\1\17\2\2"+
    "\1\20\1\2\1\21\4\2\1\22\1\23\1\2\1\24"+
    "\1\25\1\2\1\26\1\2\1\27\6\2\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\64\0\64\0\64"+
    "\0\64\0\64\0\u0444\0\64\0\u0478\0\u04ac\0\u04e0\0\u0514"+
    "\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4"+
    "\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4"+
    "\0\u0a28\0\150\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00"+
    "\0\u0d34\0\150\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\150"+
    "\0\u100c\0\u1040\0\150\0\150\0\150\0\u1074\0\u10a8\0\150"+
    "\0\u10dc\0\150\0\u1110\0\u1144\0\u1178\0\u11ac\0\150\0\150"+
    "\0\u11e0\0\150\0\150\0\u1214\0\150\0\u1248\0\u127c\0\u12b0"+
    "\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\3\1\10"+
    "\6\3\1\11\1\12\2\3\1\13\1\3\1\14\1\3"+
    "\1\15\1\3\1\16\1\17\1\20\4\3\1\21\2\3"+
    "\1\22\2\3\1\23\1\3\1\24\1\3\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\0\1\34"+
    "\65\0\52\3\12\0\2\3\1\35\7\3\1\36\37\3"+
    "\12\0\11\3\1\37\2\3\1\40\35\3\12\0\17\3"+
    "\1\41\32\3\12\0\5\3\1\42\44\3\12\0\2\3"+
    "\1\43\47\3\12\0\5\3\1\44\44\3\12\0\20\3"+
    "\1\45\31\3\12\0\5\3\1\46\44\3\12\0\25\3"+
    "\1\47\6\3\1\50\15\3\12\0\25\3\1\51\2\3"+
    "\1\52\3\3\1\53\5\3\1\54\6\3\1\55\12\0"+
    "\25\3\1\56\24\3\12\0\40\3\1\57\1\3\1\60"+
    "\7\3\12\0\32\3\2\20\16\3\12\0\30\3\1\61"+
    "\7\3\1\62\1\3\1\63\7\3\12\0\36\3\1\64"+
    "\13\3\12\0\25\3\1\65\6\3\1\66\15\3\12\0"+
    "\45\3\1\67\4\3\12\0\40\3\1\70\11\3\71\0"+
    "\1\71\4\0\3\3\1\72\46\3\12\0\3\3\1\72"+
    "\7\3\1\72\36\3\12\0\10\3\1\72\41\3\12\0"+
    "\15\3\1\72\34\3\12\0\14\3\1\72\35\3\12\0"+
    "\6\3\1\72\43\3\12\0\1\3\1\72\6\3\1\72"+
    "\41\3\12\0\11\3\1\72\40\3\12\0\21\3\1\72"+
    "\30\3\12\0\23\3\1\72\26\3\12\0\26\3\1\73"+
    "\23\3\12\0\30\3\1\74\21\3\12\0\31\3\1\75"+
    "\20\3\12\0\34\3\1\76\15\3\12\0\35\3\1\77"+
    "\14\3\12\0\35\3\1\100\14\3\12\0\34\3\1\101"+
    "\15\3\12\0\26\3\1\102\23\3\12\0\31\3\1\103"+
    "\20\3\12\0\24\3\1\104\25\3\12\0\34\3\1\105"+
    "\15\3\12\0\41\3\1\106\10\3\12\0\35\3\1\107"+
    "\14\3\12\0\41\3\1\110\10\3\12\0\41\3\1\107"+
    "\10\3\12\0\26\3\1\111\23\3\12\0\34\3\1\112"+
    "\15\3\12\0\31\3\1\113\20\3\11\0\61\71\2\0"+
    "\1\71\1\0\27\3\1\114\22\3\12\0\24\3\1\115"+
    "\25\3\12\0\35\3\1\116\14\3\12\0\31\3\1\117"+
    "\20\3\12\0\36\3\1\120\13\3\12\0\43\3\1\121"+
    "\6\3\12\0\27\3\1\122\22\3\12\0\25\3\1\123"+
    "\24\3\12\0\25\3\1\124\24\3\12\0\47\3\1\125"+
    "\2\3\12\0\27\3\1\126\22\3\12\0\42\3\1\127"+
    "\7\3\12\0\40\3\1\130\11\3\12\0\40\3\1\131"+
    "\11\3\12\0\27\3\1\132\22\3\12\0\25\3\1\133"+
    "\24\3\12\0\25\3\1\134\24\3\12\0\25\3\1\135"+
    "\24\3\12\0\44\3\1\136\5\3\12\0\35\3\1\137"+
    "\14\3\12\0\25\3\1\140\24\3\12\0\34\3\1\140"+
    "\15\3\12\0\41\3\1\141\10\3\12\0\31\3\1\134"+
    "\20\3\12\0\44\3\1\142\5\3\12\0\35\3\1\143"+
    "\14\3\12\0\30\3\1\144\21\3\12\0\26\3\1\145"+
    "\23\3\12\0\35\3\1\146\14\3\12\0\40\3\1\147"+
    "\11\3\12\0\25\3\1\150\24\3\12\0\44\3\1\151"+
    "\5\3\12\0\40\3\1\152\11\3\12\0\25\3\1\153"+
    "\24\3\12\0\25\3\1\154\24\3\12\0\34\3\1\53"+
    "\15\3\12\0\47\3\1\155\2\3\12\0\34\3\1\130"+
    "\15\3\12\0\46\3\1\156\3\3\12\0\47\3\1\157"+
    "\2\3\12\0\50\3\1\160\1\3\12\0\30\3\1\161"+
    "\21\3\12\0\25\3\1\162\24\3\12\0\26\3\1\163"+
    "\23\3\12\0\37\3\1\164\12\3\12\0\40\3\1\165"+
    "\11\3\12\0\35\3\1\166\14\3\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5096];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\5\11\1\1\1\11\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Symbol new_symbol(int type) {
			return new Symbol(type, yyline+1, yycolumn);
	}

	private Symbol new_symbol(int type, Object value) {
			return new Symbol(type, yyline+1, yycolumn, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Neispravan karakter: " + yytext());
          }
        case 25: break;
        case 2: 
          { return new_symbol(sym.TEXT, yytext());
          }
        case 26: break;
        case 3: 
          { return new_symbol(sym.BROJ, new Integer(yytext()));
          }
        case 27: break;
        case 4: 
          { return new_symbol(sym.JEDNAKO);
          }
        case 28: break;
        case 5: 
          { return new_symbol(sym.NAVODNIK);
          }
        case 29: break;
        case 6: 
          { return new_symbol(sym.OZAGRADA);
          }
        case 30: break;
        case 7: 
          { return new_symbol(sym.ZZAGRADA);
          }
        case 31: break;
        case 8: 
          { return new_symbol(sym.ZAREZ);
          }
        case 32: break;
        case 9: 
          { /* Ignorisi */
          }
        case 33: break;
        case 10: 
          { return new_symbol(sym.MESEC, yytext());
          }
        case 34: break;
        case 11: 
          { return new_symbol(sym.IME);
          }
        case 35: break;
        case 12: 
          { return new_symbol(sym.VODA, yytext());
          }
        case 36: break;
        case 13: 
          { return new_symbol(sym.VODA_KW);
          }
        case 37: break;
        case 14: 
          { return new_symbol(sym.MESTO, yytext());
          }
        case 38: break;
        case 15: 
          { return new_symbol(sym.BERBA);
          }
        case 39: break;
        case 16: 
          { return new_symbol(sym.SVETLO, yytext());
          }
        case 40: break;
        case 17: 
          { return new_symbol(sym.DODAJ);
          }
        case 41: break;
        case 18: 
          { return new_symbol(sym.MESTO_KW);
          }
        case 42: break;
        case 19: 
          { return new_symbol(sym.SADNJA);
          }
        case 43: break;
        case 20: 
          { return new_symbol(sym.SVETLO_KW);
          }
        case 44: break;
        case 21: 
          { return new_symbol(sym.DUBINA);
          }
        case 45: break;
        case 22: 
          { return new_symbol(sym.UKLONI);
          }
        case 46: break;
        case 23: 
          { return new_symbol(sym.PRETRAZI);
          }
        case 47: break;
        case 24: 
          { return new_symbol(sym.PRETRAZI_RASPON);
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return new_symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
