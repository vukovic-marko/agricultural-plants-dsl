
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package diplomski.rad.Aplikacija;

import java.io.*;
import java_cup.runtime.*;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import com.mongodb.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\006\025" +
    "\000\002\006\022\000\002\004\005\000\002\004\004\000" +
    "\002\005\004\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\012\003\006\004\012\014\010\027\007\001" +
    "\002\000\004\002\067\001\002\000\006\002\uffff\006\065" +
    "\001\002\000\004\002\ufffd\001\002\000\004\030\064\001" +
    "\002\000\020\015\037\016\044\017\041\020\040\021\045" +
    "\022\036\023\042\001\002\000\004\002\ufffe\001\002\000" +
    "\004\005\014\001\002\000\004\002\000\001\002\000\004" +
    "\013\015\001\002\000\004\005\016\001\002\000\004\025" +
    "\017\001\002\000\004\007\020\001\002\000\004\006\021" +
    "\001\002\000\004\007\022\001\002\000\004\026\023\001" +
    "\002\000\004\010\024\001\002\000\004\006\025\001\002" +
    "\000\004\030\026\001\002\000\004\006\027\001\002\000" +
    "\004\011\030\001\002\000\004\006\031\001\002\000\004" +
    "\012\032\001\002\000\006\002\ufffb\005\033\001\002\000" +
    "\004\013\034\001\002\000\004\005\035\001\002\000\004" +
    "\002\ufffc\001\002\000\004\024\062\001\002\000\004\024" +
    "\060\001\002\000\004\024\056\001\002\000\004\024\054" +
    "\001\002\000\004\024\052\001\002\000\006\002\ufff9\006" +
    "\ufff9\001\002\000\004\024\050\001\002\000\004\024\046" +
    "\001\002\000\004\030\047\001\002\000\006\002\ufff3\006" +
    "\ufff3\001\002\000\004\007\051\001\002\000\006\002\ufff6" +
    "\006\ufff6\001\002\000\004\012\053\001\002\000\006\002" +
    "\ufff1\006\ufff1\001\002\000\004\007\055\001\002\000\006" +
    "\002\ufff5\006\ufff5\001\002\000\004\010\057\001\002\000" +
    "\006\002\ufff4\006\ufff4\001\002\000\004\013\061\001\002" +
    "\000\006\002\ufff7\006\ufff7\001\002\000\004\011\063\001" +
    "\002\000\006\002\ufff2\006\ufff2\001\002\000\004\002\ufff8" +
    "\001\002\000\020\015\037\016\044\017\041\020\040\021" +
    "\045\022\036\023\042\001\002\000\006\002\ufffa\006\ufffa" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\012\002\003\004\004\005\010\006\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\065\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    MongoClient mongoClient = new MongoClient();
    DB database = mongoClient.getDB("Diplomski");
    DBCollection collection = database.getCollection("Biljke");

    static List<DBObject> res = new ArrayList();

    static Boolean success = null;

    public static void main(String args[]) throws Exception{
        System.out.println(new parser(new Yylex(new FileReader(new File(args[0])))).parse());
    }

    public static List<DBObject> par(String file) throws Exception{
        res = new ArrayList();
        success = null;
        new parser(new Yylex(new FileReader(new File(file)))).parse();

        return res;
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void report_error(String message, Object info) {
      System.err.print(message);
      System.err.flush();

      success = false;

      if (info instanceof Symbol)
	        System.err.println(" u liniji " + ((Symbol)info).left);
      else System.err.println("");
    }

    public static Integer getMonth(String month) {
        switch(month) {
            case "JAN": return 1;
            case "FEB": return 2;
            case "MAR": return 3;
            case "APR": return 4;
            case "MAJ": return 5;
            case "JUN": return 6;
            case "JUL": return 7;
            case "AVG": return 8;
            case "SEP": return 9;
            case "OKT": return 10;
            case "NOV": return 11;
            case "DEC": return 12;
            default: return -1;
        }
    }

    public Integer getDistance(Integer a, Integer b)
    {
        if (b > a) 
            return b - a;
        else 
            return Math.abs(12 - (a - b));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= izraz EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // izraz ::= dodavanje 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        Map<String, Object> mapa = (Map) d;

                        Integer raspon = getDistance(getMonth(mapa.get("sadnja").toString()), getMonth(mapa.get("berba").toString()));

                        BasicDBObject obj = new BasicDBObject("ime", mapa.get("ime"))
                                                    .append("sadnja", mapa.get("sadnja"))
                                                    .append("berba", mapa.get("berba"))
                                                    .append("mesto", mapa.get("mesto"))
                                                    .append("dubina", mapa.get("dubina"))
                                                    .append("svetlo", mapa.get("svetlo"))
                                                    .append("voda", mapa.get("voda"))
                                                    .append("raspon", raspon);


                        if (mapa.containsKey("napomena")) 
                            obj.append("napomena", mapa.get("napomena"));
                        
                        collection.insert(obj);

                        success = true;

                        System.out.println("Dodavanje biljke sa imenom '" + mapa.get("ime") + "' uspesno izvrseno."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("izraz",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // izraz ::= pretraga 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        Map<String, Object> mapa = (Map) p;
                        
                        BasicDBObject whereQuery = new BasicDBObject();

                        for (String key : mapa.keySet()) {
                            if (key.equals("dubina")) {
                                whereQuery.put(key, new BasicDBObject("$eq", mapa.get(key)));
                            } else { 
                                whereQuery.put(key, new BasicDBObject("$regex", "^" + mapa.get(key)));
                            }
                        }

                        DBCursor cursor = collection.find(whereQuery);
                        while(cursor.hasNext()) {
                            DBObject obj = cursor.next();
                            res.add(obj);
//                            System.out.println("\t" + obj);
                        }

                        System.out.println("Izraz za pretragu parsiran bez greske." + p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("izraz",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // izraz ::= pretraga_raspon 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        BasicDBObject whereQuery = new BasicDBObject();

                        whereQuery.put("raspon", new BasicDBObject("$eq", Integer.parseInt(b.toString())));
                        
                        DBCursor cursor = collection.find(whereQuery);
                        while(cursor.hasNext()) {
                            DBObject obj = cursor.next();
                            res.add(obj);
//                            System.out.println("\t" + obj);
                        }

                        System.out.println("Izraz za pretragu raspona parsiran bez greske." + b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("izraz",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // izraz ::= error 
            {
              Object RESULT =null;
		
                        success = false;
                        System.err.println("Neispravan izraz.\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("izraz",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dodavanje ::= DODAJ NAVODNIK TEXT NAVODNIK OZAGRADA MESEC ZAREZ MESEC ZZAGRADA MESTO ZAREZ BROJ ZAREZ SVETLO ZAREZ VODA NAVODNIK TEXT NAVODNIK 
            {
              Object RESULT =null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		Object ime = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int sadnjaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int sadnjaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object sadnja = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int berbaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int berbaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object berba = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int mestoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int mestoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object mesto = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int brojleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int brojright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer broj = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int svetloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int svetloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object svetlo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vodaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vodaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object voda = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int napomenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int napomenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object napomena = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        
                        Map<String, Object> mapa = new HashMap();
                        mapa.put("ime", ime);
                        mapa.put("sadnja", sadnja);
                        mapa.put("berba", berba);
                        mapa.put("mesto", mesto);
                        mapa.put("dubina", broj);
                        mapa.put("svetlo", svetlo);
                        mapa.put("voda", voda);
                        mapa.put("napomena", napomena);

                        RESULT = mapa;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dodavanje",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dodavanje ::= DODAJ NAVODNIK TEXT NAVODNIK OZAGRADA MESEC ZAREZ MESEC ZZAGRADA MESTO ZAREZ BROJ ZAREZ SVETLO ZAREZ VODA 
            {
              Object RESULT =null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object ime = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int sadnjaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int sadnjaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object sadnja = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int berbaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int berbaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object berba = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int mestoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mestoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object mesto = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int brojleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int brojright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer broj = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int svetloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int svetloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object svetlo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vodaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vodaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object voda = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        Map<String, Object> mapa = new HashMap();
                        mapa.put("ime", ime);
                        mapa.put("sadnja", sadnja);
                        mapa.put("berba", berba);
                        mapa.put("mesto", mesto);
                        mapa.put("dubina", broj);
                        mapa.put("svetlo", svetlo);
                        mapa.put("voda", voda);

                        RESULT = mapa;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dodavanje",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pretraga ::= pretraga ZAREZ pre_part 
            {
              Object RESULT =null;
		int mapaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int maparight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object mapa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        ((Map) mapa).put(((Map)p).keySet().toArray()[0], ((Map)p).get(((Map)p).keySet().toArray()[0]));
                        RESULT = mapa; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pretraga",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pretraga ::= PRETRAZI pre_part 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        RESULT = new HashMap<String, Object>();
                        ((Map) RESULT).put(((Map)p).keySet().toArray()[0], ((Map)p).get(((Map)p).keySet().toArray()[0]));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pretraga",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pretraga_raspon ::= PRETRAZI_RASPON BROJ 
            {
              Object RESULT =null;
		int brojleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int brojright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer broj = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                        RESULT = broj; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pretraga_raspon",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // pre_part ::= IME JEDNAKO TEXT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Map<Object, Object> mapa = new HashMap();
                        mapa.put("ime",t);
                        RESULT = mapa;
                        // System.out.println("prepart ::= " + RESULT); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pre_part ::= SADNJA JEDNAKO MESEC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Map<Object, Object> mapa = new HashMap();
                        mapa.put("sadnja",t);
                        RESULT = mapa;
                        // System.out.println("prepart ::= " + RESULT); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pre_part ::= BERBA JEDNAKO MESEC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Map<Object, Object> mapa = new HashMap();
                        mapa.put("berba",t);
                        RESULT = mapa;
                        // System.out.println("prepart ::= " + RESULT); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // pre_part ::= MESTO_KW JEDNAKO MESTO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Map<Object, Object> mapa = new HashMap();
                        mapa.put("mesto",t);
                        RESULT = mapa;
                        // System.out.println("prepart ::= " + RESULT); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pre_part ::= DUBINA JEDNAKO BROJ 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Map<Object, Object> mapa = new HashMap();
                        mapa.put("dubina",t);
                        RESULT = mapa;
                        // System.out.println("prepart ::= " + RESULT); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pre_part ::= SVETLO_KW JEDNAKO SVETLO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Map<Object, Object> mapa = new HashMap();
                        mapa.put("svetlo",t);
                        RESULT = mapa;
                        // System.out.println("prepart ::= " + RESULT); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // pre_part ::= VODA_KW JEDNAKO VODA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Map<Object, Object> mapa = new HashMap();
                        mapa.put("voda",t);
                        RESULT = mapa;
                        // System.out.println("prepart ::= " + RESULT); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
