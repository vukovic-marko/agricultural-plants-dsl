import java.io.*;
import java_cup.runtime.*;

import java.util.Map;
import java.util.HashMap;
import java.util.List;

import java.util.ArrayList;
import com.mongodb.*;

parser code
{:

    MongoClient mongoClient = new MongoClient();
    DB database = mongoClient.getDB("Diplomski");
    DBCollection collection = database.getCollection("Biljke");

    static List<DBObject> res = new ArrayList();

    public static void main(String args[]) throws Exception{
        System.out.println(new parser(new Yylex(new FileReader(new File(args[0])))).parse());
    }

    public static List<DBObject> par(String file) throws Exception{
        res = new ArrayList();
        new parser(new Yylex(new FileReader(new File(file)))).parse();

        return res;
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void report_error(String message, Object info) {
      System.err.print(message);
      System.err.flush();
      if (info instanceof Symbol)
	        System.err.println(" u liniji " + ((Symbol)info).left);
      else System.err.println("");
    }

    public static Integer getMonth(String month) {
        switch(month) {
            case "JAN": return 1;
            case "FEB": return 2;
            case "MAR": return 3;
            case "APR": return 4;
            case "MAJ": return 5;
            case "JUN": return 6;
            case "JUL": return 7;
            case "AVG": return 8;
            case "SEP": return 9;
            case "OKT": return 10;
            case "NOV": return 11;
            case "DEC": return 12;
            default: return -1;
        }
    }

    public Integer getDistance(Integer a, Integer b)
    {
        if (b > a) 
            return b - a;
        else 
            return Math.abs(12 - (a - b));
    }
:}

terminal            DODAJ, NAVODNIK, ZAREZ, MESEC, MESTO, SVETLO, VODA, TEXT;
terminal            PRETRAZI, IME, SADNJA, BERBA, MESTO_KW, DUBINA, SVETLO_KW, VODA_KW, JEDNAKO;
terminal            OZAGRADA, ZZAGRADA;
terminal            PRETRAZI_RASPON;
terminal Integer    BROJ;

non terminal izraz, pre_part, pretraga, pretraga_raspon, dodavanje;

start with izraz;

//non terminal kod;
// start with kod;

// kod ::=             kod izraz
//                     | izraz 
//                     ;

izraz ::=           dodavanje:d {:

                        Map<String, Object> mapa = (Map) d;

                        Integer raspon = getDistance(getMonth(mapa.get("sadnja").toString()), getMonth(mapa.get("berba").toString()));

                        BasicDBObject obj = new BasicDBObject("ime", mapa.get("ime"))
                                                    .append("sadnja", mapa.get("sadnja"))
                                                    .append("berba", mapa.get("berba"))
                                                    .append("mesto", mapa.get("mesto"))
                                                    .append("dubina", mapa.get("dubina"))
                                                    .append("svetlo", mapa.get("svetlo"))
                                                    .append("voda", mapa.get("voda"))
                                                    .append("raspon", raspon);


                        if (mapa.containsKey("napomena")) 
                            obj.append("napomena", mapa.get("napomena"));
                        
                        collection.insert(obj);               

                        System.out.println("Dodavanje biljke sa imenom '" + mapa.get("ime") + "' uspesno izvrseno."); :}
                    | pretraga:p {:

                        Map<String, Object> mapa = (Map) p;
                        
                        BasicDBObject whereQuery = new BasicDBObject();

                        for (String key : mapa.keySet()) {
                            if (key.equals("dubina")) {
                                whereQuery.put(key, new BasicDBObject("$eq", mapa.get(key)));
                            } else { 
                                whereQuery.put(key, new BasicDBObject("$regex", "^" + mapa.get(key)));
                            }
                        }

                        DBCursor cursor = collection.find(whereQuery);
                        while(cursor.hasNext()) {
                            DBObject obj = cursor.next();
                            res.add(obj);
//                            System.out.println("\t" + obj);
                        }

                        System.out.println("Izraz za pretragu parsiran bez greske." + p); :}
                    | pretraga_raspon:b {:
                        
                        BasicDBObject whereQuery = new BasicDBObject();

                        whereQuery.put("raspon", new BasicDBObject("$eq", Integer.parseInt(b.toString())));
                        
                        DBCursor cursor = collection.find(whereQuery);
                        while(cursor.hasNext()) {
                            DBObject obj = cursor.next();
                            res.add(obj);
//                            System.out.println("\t" + obj);
                        }

                        System.out.println("Izraz za pretragu raspona parsiran bez greske." + b); :}
                    | error {:
                        System.err.println("Neispravan izraz.\n"); :}
                    ;
dodavanje ::=       DODAJ NAVODNIK TEXT:ime NAVODNIK OZAGRADA MESEC:sadnja ZAREZ MESEC:berba ZZAGRADA MESTO:mesto ZAREZ BROJ:broj ZAREZ SVETLO:svetlo ZAREZ VODA:voda NAVODNIK TEXT:napomena NAVODNIK {:
                        
                        Map<String, Object> mapa = new HashMap();
                        mapa.put("ime", ime);
                        mapa.put("sadnja", sadnja);
                        mapa.put("berba", berba);
                        mapa.put("mesto", mesto);
                        mapa.put("dubina", broj);
                        mapa.put("svetlo", svetlo);
                        mapa.put("voda", voda);
                        mapa.put("napomena", napomena);

                        RESULT = mapa;
                    :}
                    | DODAJ NAVODNIK TEXT:ime NAVODNIK OZAGRADA MESEC:sadnja ZAREZ MESEC:berba ZZAGRADA MESTO:mesto ZAREZ BROJ:broj ZAREZ SVETLO:svetlo ZAREZ VODA:voda {:
                        
                        Map<String, Object> mapa = new HashMap();
                        mapa.put("ime", ime);
                        mapa.put("sadnja", sadnja);
                        mapa.put("berba", berba);
                        mapa.put("mesto", mesto);
                        mapa.put("dubina", broj);
                        mapa.put("svetlo", svetlo);
                        mapa.put("voda", voda);

                        RESULT = mapa;
                    :}
                    ;

pretraga ::=        pretraga:mapa ZAREZ pre_part:p {:
                        
                        ((Map) mapa).put(((Map)p).keySet().toArray()[0], ((Map)p).get(((Map)p).keySet().toArray()[0]));
                        RESULT = mapa; 
                    :}
                    | PRETRAZI pre_part:p {:
                        
                        RESULT = new HashMap<String, Object>();
                        ((Map) RESULT).put(((Map)p).keySet().toArray()[0], ((Map)p).get(((Map)p).keySet().toArray()[0]));
                    :}
                    ;

pretraga_raspon ::= PRETRAZI_RASPON BROJ:broj {:
                        
                        RESULT = broj; 
                    :}
                    ;

pre_part ::=        IME:i JEDNAKO TEXT:t {:
                        Map<Object, Object> mapa = new HashMap();
                        mapa.put("ime",t);
                        RESULT = mapa;
                        // System.out.println("prepart ::= " + RESULT); 
                    :}
                    | SADNJA JEDNAKO MESEC:t {:
                        Map<Object, Object> mapa = new HashMap();
                        mapa.put("sadnja",t);
                        RESULT = mapa;
                        // System.out.println("prepart ::= " + RESULT); 
                    :}
                    | BERBA JEDNAKO MESEC:t {:
                        Map<Object, Object> mapa = new HashMap();
                        mapa.put("berba",t);
                        RESULT = mapa;
                        // System.out.println("prepart ::= " + RESULT); 
                    :}
                    | MESTO_KW JEDNAKO MESTO:t {:
                        Map<Object, Object> mapa = new HashMap();
                        mapa.put("mesto",t);
                        RESULT = mapa;
                        // System.out.println("prepart ::= " + RESULT); 
                    :}
                    | DUBINA JEDNAKO BROJ:t {:
                        Map<Object, Object> mapa = new HashMap();
                        mapa.put("dubina",t);
                        RESULT = mapa;
                        // System.out.println("prepart ::= " + RESULT); 
                    :}
                    | SVETLO_KW JEDNAKO SVETLO:t {:
                        Map<Object, Object> mapa = new HashMap();
                        mapa.put("svetlo",t);
                        RESULT = mapa;
                        // System.out.println("prepart ::= " + RESULT); 
                    :}
                    | VODA_KW JEDNAKO VODA:t {:
                        Map<Object, Object> mapa = new HashMap();
                        mapa.put("voda",t);
                        RESULT = mapa;
                        // System.out.println("prepart ::= " + RESULT); 
                    :}
                    ;
                